#+OPTIONS: \n:t
#+OPTIONS: ^:nil
#+TITLE: TiKV nodes isolation between batch and online transaction

* OLTP isolation from Batch
  #+attr_html: :width 800xp
  [[./png/placementrule/isolation-batch-oltp.01.png]]
  #+attr_html: :width 800px
  [[./png/placementrule/isolation-batch-oltp.02.png]]
* TiDB Cluster generation with node labels
** Cluster deployment
  Use the below config to generate TiDB Cluster with TiKV nodes labels. Three TiKV nodes are group together as batch nodes. And the remaining three are grouped as online nodes. 
  #+BEGIN_SRC
OhMyTiUP$ more aws-nodes-isolation.yaml 
workstation:
  imageid: ami-07d02ee1eeb0c996c                  # Workstation EC2 instance
  keyname: jay-us-east-01                         # Public key for workstation instance deployment
  keyfile: /home/pi/.ssh/jay-us-east-01.pem       # Private key to access the workstation
  volumeSize: 100                                 # disk size in the workstation
  enable_monitoring: disabled                     # enable the moniroting on the workstation
  instance_type: c5.2xlarge
  cidr: 172.81.0.0/16
aws_topo_configs:
  general:
    # debian os
    imageid: ami-07d02ee1eeb0c996c                # Default image id for EC2
    keyname: jay-us-east-01                       # Public key to access the EC2 instance
    keyfile: /home/pi/.ssh/jay-us-east-01.pem
    cidr: 172.83.0.0/16
    tidb_version: v7.0.0
    excluded_az:                                  # The AZ to be excluded for the subnets
      - us-east-1e
  pd:
    instance_type: c5.2xlarge
    count: 3
  tidb:
    instance_type: c5.2xlarge
    count: 2
  tikv:
    -
      instance_type: c5.2xlarge
      count: 3
      volumeSize: 300
      volumeType: gp3
      iops: 3000
      labels:
      -
        Name: db_type
        Value: online
    - 
      instance_type: c5.xlarge
      count: 3
      volumeSize: 100
      volumeType: gp3
      iops: 2000
      labels:
      -
        Name: db_type
        Value: batch
OhMyTiUP$ ./bin/aws tidb deploy placementruletest /tmp/aws-nodes-isolation.yaml
  #+END_SRC
  #+attr_html: :width 800px
  [[./png/placementrule/placementrule.01.png]]
  #+attr_html: :width 800px
  [[./png/placementrule/placementrule.02.png]]
** List all the resources
   #+BEGIN_SRC
OhMyTiUP$ ./bin/aws tidb list placementruletest
   #+END_SRC
   #+attr_html: :width 800px
   [[./png/placementrule/placementrule.03.png]]
   #+attr_html: :width 800px
   [[./png/placementrule/placementrule.04.png]]
** Check the placement rule labels
   #+BEGIN_SRC
OhMyTiUP$ mysql -h placementruletest-3c7eacd157d8b3d0.elb.us-east-1.amazonaws.com -u root -P 4000 test
MySQL [test]> show placement group;
   #+END_SRC
   #+attr_html: :width 800px
   [[./png/placementrule/placementrule.05.png]]
* Command description
** aws tidb perf placement-rule
   There are three sub command for the latency measurement.
   + prepare - Prepare the test environment including database/table/placement rule generation and data preparation
   + run     - Run the actual test
   + cleanup - Cleanup all the resources (todo)

  #+BEGIN_SRC
OhMyTiUP$ ./bin/aws tidb perf placement-rule --help
  #+END_SRC
  #+attr_html: :width 800px
  [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0101.png]]
** aws tidb perf placement-rule prepare
   This command is used for test preparation. Including:
   + batch database creation
   + batch table creation
   + batch table(ontime) sample data download and import to DB
   + Placement rule policy creation(mode: partition)
   + sysbench database creation
   + sysbench table creation
   + sysbench customization module upload

   #+attr_html: :width 800px
   [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0102.png]]
** aws tidb perf placement-rule run
*** Simple TiKV mode
    In the mode, all the TiKV nodes are shared by the batch and online application. Sometimes heavy batch might impact the online transaction even though there is no table confilict. Especially the log apply duration is impacted heavily if the batch is heavy.
*** Placment rule policy TiKV mode
    In this mode, the TiKV nodes are grouped to two. Online and batch. The online group nodes are used only by sysbench while the batch nodes are only used by batch. With placement rule, the TiKV resources isolation are achieved.

    #+attr_html: :width 800px
    [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0103.png]]
* Latency impact test
** Scenario: Common TiDB Cluster without placement rule
*** Preparation
#+BEGIN_SRC
OhMyTiUP$ ./bin/aws tidb perf placement-rule prepare placementruletest --sysbench-num-tables 10 --sysbench-execution-time 30 --tikv-mode partition --ontime-start-ym 2021-01 --ontime-end-ym 2021-02
Execution Time:
Step                       Duration(s)
----                       -----------
Package Install            29.4s
DB Resource preparation    40s
Template render            1m18.9s
Batch data import(ontime)  2m41s
sysbench preparation       13.4s
sysbench scripts render    1m27.9s
Total                      6m50s

#+END_SRC
    #+attr_html: :width 800px
    [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0201.png]]

*** PlacementRule check
    #+BEGIN_SRC
MySQL [latencytest]> select table_schema, table_name, TIDB_PLACEMENT_POLICY_NAME from information_schema.tables where table_name in ('ontime' ) or table_schema = 'sbtest' order by table_schema, table_name;
+--------------+------------+----------------------------+
| table_schema | table_name | TIDB_PLACEMENT_POLICY_NAME |
+--------------+------------+----------------------------+
| latencytest  | ontime     | NULL                       |
| sbtest       | sbtest1    | NULL                       |
| sbtest       | sbtest10   | NULL                       |
| sbtest       | sbtest2    | NULL                       |
| sbtest       | sbtest3    | NULL                       |
| sbtest       | sbtest4    | NULL                       |
| sbtest       | sbtest5    | NULL                       |
| sbtest       | sbtest6    | NULL                       |
| sbtest       | sbtest7    | NULL                       |
| sbtest       | sbtest8    | NULL                       |
| sbtest       | sbtest9    | NULL                       |
+--------------+------------+----------------------------+
11 rows in set (0.011 sec)
    #+END_SRC
    #+attr_html: :width 800px
    [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0202.png]]
*** Run test
#+BEGIN_SRC

OhMyTiUP$ ./bin/aws tidb perf placement-rule run placementruletest --sysbench-num-tables 10 --batch-size x,50000 --repeats 2 --sysbench-plugin-name tidb_oltp_insert_simple
Test Case         Rows Inserted  reads  writes  queries  events  events/sec  queries  queries/sec  latency_min(ms)  latency_avg(ms)  latency_max(ms)  95th_latency_pct (ms) ms  latency_sum (ms)  Start Time  End Time
---------         -------------  -----  ------  -------  ------  ----------  -------  -----------  ---------------  ---------------  ---------------  ------------------------  ----------------  ----------  --------
batchsize: x      0              0      17703   17703    17703   589.98      17703    589.98       3.84             6.78             77.29            8.58                      119991.10         15:41:57    15:42:30
batchsize: 50000  600000         0      20431   20431    20431   680.88      20431    680.88       2.66             5.87             51.93            7.84                      119986.04         15:42:50    15:43:22
batchsize: x      0              0      21321   21321    21321   710.62      21321    710.62       2.73             5.63             78.65            7.30                      119978.64         15:44:18    15:44:50
batchsize: 50000  300000         0      19746   19746    19746   658.11      19746    658.11       2.74             6.08             54.91            7.98                      119979.95         15:45:10    15:45:43
#+END_SRC
    #+attr_html: :width 800px
    [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0203.png]]
As the result from the above example, because of the heavy batch impact, the latency and qps are impacted compared to the case where only sysbench is running.
** Scenario: Common TiDB Cluster with placement rule
*** Preparation  
    #+BEGIN_SRC
OhMyTiUP$./bin/aws tidb perf placement-rule prepare placementruletest --sysbench-num-tables 10 --sysbench-execution-time 300 --tikv-mode partition --ontime-start-ym 2021-01 --ontime-end-ym 2021-02
Execution Time:
Step                       Duration(s)
----                       -----------
Package Install            29.6s
DB Resource preparation    39.5s
Template render            1m18.3s
Batch data import(ontime)  2m40s
sysbench preparation       12.8s
sysbench scripts render    1m28.7s
Total                      6m49s
    #+END_SRC
    #+attr_html: :width 800px
    [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0301.png]]
If the workload is not high enough, the batch does not have much impact on the online process, while the batch has the impact on the online process while the online process has high workload.

*** PlacementRule check
#+BEGIN_SRC
MySQL$ select table_schema, table_name, TIDB_PLACEMENT_POLICY_NAME from information_schema.tables where table_name in ('ontime' ) or table_schema = 'sbtest' order by table_schema, table_name;
+--------------+------------+----------------------------+
| table_schema | table_name | TIDB_PLACEMENT_POLICY_NAME |
+--------------+------------+----------------------------+
| latencytest  | ontime     | policy_batch               |
| sbtest       | sbtest1    | policy_online              |
| sbtest       | sbtest10   | policy_online              |
| sbtest       | sbtest2    | policy_online              |
| sbtest       | sbtest3    | policy_online              |
| sbtest       | sbtest4    | policy_online              |
| sbtest       | sbtest5    | policy_online              |
| sbtest       | sbtest6    | policy_online              |
| sbtest       | sbtest7    | policy_online              |
| sbtest       | sbtest8    | policy_online              |
| sbtest       | sbtest9    | policy_online              |
+--------------+------------+----------------------------+
11 rows in set (0.011 sec)
#+END_SRC
    #+attr_html: :width 800px
    [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0302.png]]
*** Run test
#+BEGIN_SRC
OhMyTiUP$ ./bin/aws tidb perf placement-rule run placementruletest --sysbench-num-tables 10 --batch-size x,50000 --repeats 2 --sysbench-plugin-name tidb_oltp_insert_simple
Test Case         Rows Inserted  reads  writes  queries  events  events/sec  queries  queries/sec  latency_min(ms)  latency_avg(ms)  latency_max(ms)  95th_latency_pct (ms) ms  latency_sum (ms)  Start Time  End Time
---------         -------------  -----  ------  -------  ------  ----------  -------  -----------  ---------------  ---------------  ---------------  ------------------------  ----------------  ----------  --------
batchsize: x      0              0      197638  197638   197638  658.79      197638   658.79       2.60             6.07             60.19            8.43                      1199712.09        14:49:31    14:54:33
batchsize: 50000  2900000        0      211333  211333   211333  704.43      211333   704.43       2.51             5.68             208.74           7.70                      1199682.12        14:54:53    14:59:56
batchsize: x      0              0      192668  192668   192668  642.22      192668   642.22       2.63             6.23             223.82           8.58                      1199748.46        15:00:25    15:05:31
batchsize: 50000  2950000        0      176898  176898   176898  589.65      176898   589.65       3.75             6.78             62.67            8.74                      1199704.34        15:05:51    15:10:54
#+END_SRC
    #+attr_html: :width 800px
    [[https://www.51yomo.net/static/doc/ResourceControl/placementrule/0303.png]]
** Run test against cluster with batch/online isolated

*** Preparation
    #+BEGIN_SRC
OhMyTiUP$./bin/aws tidb perf resource-isolation prepare placementruletest --sysbench-num-tables 50  --tikv-mode partition
    #+END_SRC
*** Run
    #+BEGIN_SRC
./bin/aws tidb measure-latency run placementruletest --repeats 2 --trans-interval 200 --batch-size x,50000
    #+END_SRC
[[./png/placementrule/placementrule.10.png]]
The sysbench is not impacted by the batch too much. In other words, from the result the resources between batch and online application are isolated from each other.
* How to simulate the batch import
Use the below flow to simulate the heavy batch process.
  + Create the ontime and ontime01 table. Please refer to [[https://github.com/ClickHouse/ClickHouse/blob/master/docs/en/getting-started/example-datasets/ontime.md][Clickhouse-sample-data]]
  + Import one Month data into ontime01
  + Insert into ontime select * from ontim01 limit 10000

                        
